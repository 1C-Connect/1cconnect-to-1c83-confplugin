
#Область ПрграммныйИнтерфейс

// Если сотрудник был принят на работ, тогда или создаем нового сотрудника в облаке 1С-Коннект 
// или восстанавливаем ранее удаленного, если сотрудник был уволен тогда удаляем его в облаке 1С-Коннект
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура ОбработатьДанныеПоСотрудникам() Экспорт
	
	ОбработатьДанныеРегистрСвязиПользователя();
	
	ПользователиКУдалениюВосстановлению = ПолучимСвязиСПользователямиУдалениеВосстановление();
	
	Пока ПользователиКУдалениюВосстановлению.Следующий() Цикл
				
		Если ПользователиКУдалениюВосстановлению.ПомеченНаУдалениеСотрудникКомпании
			И НЕ ПользователиКУдалениюВосстановлению.ПомеченНаУдалениеПользователь1СКоннект Тогда
			
			Действие = "УдалитьСотрудника";			
			
			АктуализироватьСотрудников(Действие, ПользователиКУдалениюВосстановлению.ИДПользователя1СКоннект, ПользователиКУдалениюВосстановлению); 
			
		ИначеЕсли НЕ ПользователиКУдалениюВосстановлению.ПомеченНаУдалениеСотрудникКомпании
			И ПользователиКУдалениюВосстановлению.ПомеченНаУдалениеПользователь1СКоннект Тогда
			
			Действие = "ВосстановитьСотрудника";
			
			АктуализироватьСотрудников(Действие, ПользователиКУдалениюВосстановлению.ИДСотрудникаКомпании, ПользователиКУдалениюВосстановлению);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение списка всех неудаленных сотрудников организации
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//		ИДСотрудникаКомпании - Строка (36)(обязательное)(не пустое) - Идентификатор сотрудника в конфигурации
//		ИДПользователя1СКоннект - Строка (36)(обязательное)(не пустое) - Идентификатор сотрудника в 1С-Коннект
//		Имя - Строка (20)(обязательное)(не пустое) - Имя сотрудника
//		Фамилия - Строка (20)(обязательное)(возможно пустое) - Фамилия сотрудника
//		Отчество  Строка (20)(обязательное)(возможно пустое) - Отчество
//		Email - Строка (320)(обязательное)(не пустое) - Электронная почта
//		Логин - Строка (20)(обязательное)(не пустое) - Электронная почта
//
Функция Сотрудники() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());
	
	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);

	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	Попытка
		ОбъектXDTO = WSПрокси.GetEmployeesList(ВходныеПараметрыОбъектXDTO);
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "При попытке подключения к облаку 1С-Коннект под учетной записью <" + ДанныеАвторизации.Логин + "> возникает ошибка:" + Символы.ПС + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат Неопределено;
	КонецПопытки;

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("EmployeeID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	ResultDataТаблица.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ResultDataТаблица.Колонки.Добавить("Surname", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ResultDataТаблица.Колонки.Добавить("SecondaryName", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ResultDataТаблица.Колонки.Добавить("Email", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(320)));
	ResultDataТаблица.Колонки.Добавить("Login", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	
	СоответствияИмен = Новый Массив();
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "EmployeeID", "ИДПользователя1СКоннект"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "Name", "Имя"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "Surname", "Фамилия"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "SecondaryName", "Отчество"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "Email", "Email"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "Login", "Логин"));

	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		ResultDataТаблица = Результат.ResultData;
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗСотрудники.ИДПользователя1СКоннект КАК СТРОКА(36)) КАК ИДПользователя1СКоннект,
		|	ТЗСотрудники.Имя КАК Имя,
		|	ТЗСотрудники.Фамилия КАК Фамилия,
		|	ТЗСотрудники.Отчество КАК Отчество,
		|	ТЗСотрудники.Email КАК Email,
		|	ТЗСотрудники.Логин КАК Логин
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	&ТЗСотрудники КАК ТЗСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании КАК ИДСотрудникаКомпании,
		|	ВТ_Сотрудники.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект,
		|	ВТ_Сотрудники.Имя КАК Имя,
		|	ВТ_Сотрудники.Фамилия КАК Фамилия,
		|	ВТ_Сотрудники.Отчество КАК Отчество,
		|	ВТ_Сотрудники.Email КАК Email,
		|	ВТ_Сотрудники.Логин КАК Логин
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
		|		ПО ВТ_Сотрудники.ИДПользователя1СКоннект = Коннект_СвязиСПользователями.ИДПользователя1СКоннект";
		
		Запрос.УстановитьПараметр("ТЗСотрудники", ResultDataТаблица);
		РезультатЗапроса = Запрос.Выполнить();
		
		ResultDataТаблица = РезультатЗапроса.Выгрузить();
		
		Возврат ResultDataТаблица;
		
	Иначе
		
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode + ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;
		
	КонецЕсли;

КонецФункции

// Чтение линий поддержки, получаемых конкретными сотрудниками
//
// Параметры:
//  ИДПолучателяПоддержки - Строка(36)(не обязательное, не пустое) - Идентификатор получателя поддержки, для которого читаются линии поддержки
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   ИДПолучателяПоддержки - Строка(36)(обязательное, не пустое) - Идентификатор получателя линии.
//   ИДЛинииПоддержки - Строка(36) (обязательное, не пустое) - Идентификатор линии поддержки, которую получает пользователь
//
Функция ПодключенныеЛинииПоддержки(ИДПолучателяПоддержки = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ИДПолучателяПоддержки) Тогда
		ВходныеПараметры.Вставить("ConsumerID", ИДПолучателяПоддержки);
	КонецЕсли;
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());
	
	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);

	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	ОбъектXDTO = WSПрокси.GetLinesToConsumers(ВходныеПараметрыОбъектXDTO);

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("ConsumerID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	ResultDataТаблица.Колонки.Добавить("SupportLineID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	//МассивДанные = Новый Массив;
	
	СоответствияИмен = Новый Массив();
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "ConsumerID", "ИДПолучателяПоддержки"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "SupportLineID", "ИДЛинииПоддержки"));
	
	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		
		ResultDataТаблица = Результат.ResultData;
		
		//Для Каждого СтрокаТЗ Из ResultDataТаблица Цикл
		//	СтруктураДанных = Новый Структура("ConsumerID, SupportLineID");
		//	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаТЗ);
		//	МассивДанные.Добавить(СтруктураДанных);
		//КонецЦикла;
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;
		
	Иначе
	// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode
			+ ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	КонецЕсли;

КонецФункции

// Чтение пользователей, которые получают или получали поддержку от организации под которой выполняется операция
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   ИДПолучателяПоддержки - Строка (36)(обязательное)(не пустое) - Идентификатор сотрудника. Справочник Устройства
//   Имя - Строка (20)(обязательное)(не пустое) - Имя сотрудника
//   Фамилия - Строка (20)(обязательное)(возможно пустое) - Фамилия сотрудника
//   Отчество- Строка (20)(обязательное)(возможно пустое) - Отчество
//   Email - Строка (320)(обязательное)(возможно пустое) - Электронная почта
//
Функция ПолучателиПоддержки() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());
	
	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);

	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	ОбъектXDTO = WSПрокси.GetConsumersList(ВходныеПараметрыОбъектXDTO);

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("ConsumerID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	ResultDataТаблица.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ResultDataТаблица.Колонки.Добавить("Surname", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ResultDataТаблица.Колонки.Добавить("SecondaryName", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ResultDataТаблица.Колонки.Добавить("EMail", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(320)));
	
	СоответствияИмен = Новый Массив();
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "ConsumerID", "ИДПолучателяПоддержки"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "Name", "Имя"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "Surname", "Фамилия"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "SecondaryName", "Отчество"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "EMail", "Email"));
	
	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		ResultDataТаблица = Результат.ResultData;
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	Иначе
		
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode
			+ ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	КонецЕсли;

КонецФункции

// Добавление сотрудников
//
// Параметры:
//  Имя - Строка (20)(обязательное)(не пустое) - Имя сотрудника
//  Фамилия - Строка (20)(обязательное)(возможно пустое) - Фамилия сотрудника
//  Отчество - Строка (20)(обязательное)(возможно пустое) - Отчество
//  EMail - Строка (320)(обязательное)(не пустое) - Электронная почта
//
// Возвращаемое значение:
//  ИДПользователя1СКоннект - Строка(36) (обязательное)(не пустое) - Идентификатор сотрудника. Справочник устройства
//
Функция ДобавитьСотрудника(Имя, Фамилия, Отчество, Email) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Name", Имя);
	ВходныеПараметры.Вставить("Surname", Фамилия);
	ВходныеПараметры.Вставить("SecondaryName", Отчество);
	ВходныеПараметры.Вставить("EMail", Email);
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());

	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);
	
	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	ОбъектXDTO = WSПрокси.AddEmployee(ВходныеПараметрыОбъектXDTO);

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("EmployeeID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	
	СоответствияИмен = Новый Массив();
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "EmployeeID", "ИДПользователя1СКоннект"));
	
	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		ResultDataТаблица = Результат.ResultData;
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	Иначе
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode
			+ ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	КонецЕсли;

КонецФункции

// Восстановление сотрудников
//
// Параметры:
//  ИДПользователя1СКоннект - Строка(36) (обязательное)(не пустое) - Идентификатор сотрудника. Справочник устройства.
//
// Возвращаемое значение:
//  Таблица значений:
//   Результат - Булево (обязательное) (не пустое) - Истина, если пользователь удален
//
Функция ВосстановитьСотрудника(ИДПользователя1СКоннект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("EmployeeID", ИДПользователя1СКоннект);
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());

	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);

	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	Попытка
		
		ОбъектXDTO = WSПрокси.RestoreEmployee(ВходныеПараметрыОбъектXDTO);
		
	Исключение
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	
	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		НоваяСтрока = ResultDataТаблица.Добавить();
		НоваяСтрока.Результат = Истина;
		
		Возврат ResultDataТаблица;
		
	Иначе
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode + ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		НоваяСтрока = ResultDataТаблица.Добавить();
		НоваяСтрока.Результат = Ложь;
		
		Возврат ResultDataТаблица;

		
	КонецЕсли;

КонецФункции

// Удаление сотрудников
//
// Параметры:
//  ИДПользователя1СКоннект - Строка(36) (обязательное)(не пустое) - Идентификатор информационной базы с которой идет запрос
//
// Возвращаемое значение:
//  Таблица значений:
//   Результат - Булево (обязательное) (не пустое) - Истина, если пользователь удален
//
Функция УдалитьСотрудника(ИДПользователя1СКоннект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("EmployeeID", ИДПользователя1СКоннект);
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());

	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);

	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	Попытка
		ОбъектXDTO = WSПрокси.DeleteEmployee(ВходныеПараметрыОбъектXDTO);
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	
	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		НоваяСтрока = ResultDataТаблица.Добавить();
		НоваяСтрока.Результат = Истина;
		
		Возврат ResultDataТаблица;
		
	Иначе
		
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode + ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		НоваяСтрока = ResultDataТаблица.Добавить();
		НоваяСтрока.Результат = Истина;
		
		Возврат ResultDataТаблица;

		
	КонецЕсли;

КонецФункции

// Отправка уведомления группе сотрудников в определенные линии поддержки
//
// Параметры:
//  Наименование - Строка(150) (обязательное)(не пустое) - Название уведомления.
//  Тема - Строка(150) (обязательное)(не пустое) - Тема сообщения.
//  Сообщение - Строка(500) (обязательное)(не пустое) - Текст сообщения.
//  Получатели - ТаблицаЗначений (обязательное)(не пустое) - Массив получателей рассылки. Количество элементов массива не должно превышать 100.
//   ИДПолучателяПоддержки - Строка(36) (обязательное)(не пустое) - Пользователь или специалист которому предназначено сообщение.
//   ИДЛинииПоддержки - Строка(36)(обязательное)(не пустое) - Услуга, в чат по которой будет доставлено сообщение.
//  Гиперссылка - Строка(неогр) (необязательное)(не пустое) - Ссылка на подробное описание. Неограниченная длина.
//  Строка(150) - Строка(20) (необязательное)(не пустое) - Текст на кнопке подробнее.
//
// Возвращаемое значение:
//  Таблица значений:
//   Результат - Строка(36) - Идентификатор рассылки.
//
Функция ОтправитьУведомление(Наименование, Тема, Сообщение, Получатели, Гиперссылка = Неопределено, ПредставлениеГиперссылки = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СоответствияИмен = Новый Массив();
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "ИДПолучателяПоддержки", "EmployeeID"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "ИДЛинииПоддержки", "SupportLineID"));
	ПереименоватьКолонкиТЗ(Получатели, СоответствияИмен);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Name", Наименование);
	ВходныеПараметры.Вставить("Subject", Тема);
	ВходныеПараметры.Вставить("Text", Сообщение);
	ВходныеПараметры.Вставить("Recipients", Получатели);
	Если ЗначениеЗаполнено(Гиперссылка) Тогда 
		ВходныеПараметры.Вставить("DescriptionURL", Гиперссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПредставлениеГиперссылки) Тогда 
		ВходныеПараметры.Вставить("DescriptionHint", ПредставлениеГиперссылки);
	КонецЕсли;
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());

	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);
	
	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	ОбъектXDTO = WSПрокси.SendNotification(ВходныеПараметрыОбъектXDTO);

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	
	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		СтрокаРезультата = ResultDataТаблица.Добавить();
		СтрокаРезультата.Результат = Истина;
		
		Возврат ResultDataТаблица;

	Иначе
		
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode
			+ ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		СтрокаРезультата = ResultDataТаблица.Добавить();
		СтрокаРезультата.Результат = Ложь;
		
		Возврат Результат.ResultData;

	КонецЕсли;

КонецФункции

// Чтение линий поддержки созданных компанией + линия "Моя компания"
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Таблица значений:
//   ИДЛинииПоддержки - Строка (36)(обязательное)(не пустое) - Идентификатор сотрудника.
//   ОтображаемоеНазвание - Строка(100) - Отображаемое название
//
Функция ЛинииПоддержки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());

	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);
	
	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	ОбъектXDTO = WSПрокси.GetSupportLinesList(ВходныеПараметрыОбъектXDTO);

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("SupportLineID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	ResultDataТаблица.Колонки.Добавить("DisplayedName", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	
	СоответствияИмен = Новый Массив();
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "SupportLineID", "ИДЛинииПоддержки"));
	СоответствияИмен.Добавить(Новый Структура("СтароеНаименование,НовоеНаименование", "DisplayedName", "ОтображаемоеНазвание"));

	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		ResultDataТаблица = Результат.ResultData;
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	Иначе
		
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode
			+ ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();
		
		ПереименоватьКолонкиТЗ(ResultDataТаблица, СоответствияИмен);
		
		Возврат ResultDataТаблица;

	КонецЕсли;

КонецФункции

// Отправка файла пользователю в чат по линии поддержки
//
// Параметры:
//  ИДПолучателяПоддержки - Строка(36) (обязательное)(не пустое) - Пользователь или специалист которому предназначено сообщение.
//  ИДЛинииПоддержки - Строка(36) (обязательное)(не пустое) - Услуга, в чат по которой будет доставлен файл.
//  ИДФайла - Строка(50) (обязательное)(не пустое) - Ссылка на файл в файловом хранилище 1c-connect
//  ИмяОтправителя - Строка(60) (обязательное)(не пустое) - Имя отправителя
//
// Возвращаемое значение:
//  Булево - Истин, если файл отправлен
//
Функция ОтправитьФайл(ИДПолучателяПоддержки, ИДЛинииПоддержки, ИДФайла, ИмяОтправителя) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("ConsumerID", ИДПолучателяПоддержки);
	ВходныеПараметры.Вставить("SupportLineID", ИДЛинииПоддержки);
	ВходныеПараметры.Вставить("FileID", ИДФайла);
	ВходныеПараметры.Вставить("SenderName", ИмяОтправителя);
	ВходныеПараметры.Вставить("InfobaseID", Коннект_ОбщегоНазначения.ПолучитьИдентификаторБазы());

	ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	WSПрокси = Коннект_ОбщегоНазначения.WSПроксиКоннект(ДанныеАвторизации);

	// Для передачи переменной типа Структура через SOAP необходима сериализация
	ВходныеПараметрыОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВходныеПараметры);

	// Вызов операции. В качестве входного параметра ОбъектXDTO
	ОбъектXDTO = WSПрокси.SendFile(ВходныеПараметрыОбъектXDTO);

	// В результате возвращается структура с полями ResultCode и ResultData. Их надо также перевести из ОбъектXDTO в Структуру
	Результат = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	ResultDataТаблица.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	
	// Если операция по обработке пакета выполнилась успешно то вернется код "SUCCESS", и тогда в поле ResultData будет список клиентов
	Если Результат.ResultCode = "SUCCESS" Тогда
		
		НоваяСтрока = ResultDataТаблица.Добавить();
		НоваяСтрока.Результат = Истина;
		НоваяСтрока.ОписаниеОшибки = Результат.ResultData;
		
		Возврат ResultDataТаблица;

	Иначе
		
		// Если операция выполнилась не успешно, то в  поле ResultCode будет код ошибки, а в ResultData - дополнительное пояснение к ошибке
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Результат.ResultCode
			+ ?(Результат.ResultData <> "", " : ", "") + Результат.ResultData;
		СообщениеПользователю.Сообщить();

		НоваяСтрока = ResultDataТаблица.Добавить();
		НоваяСтрока.Результат = Ложь;
		НоваяСтрока.ОписаниеОшибки = Результат.ResultData;
		
		Возврат ResultDataТаблица;

	КонецЕсли;

КонецФункции

// Загружает файл на сервер коннекта и получает УИД файла, который можно отправлять пользователю в чат по услуге.
//
// Параметры:
//  ИмяФайла - Строка (обязательное)(не пустое) - Имя файла с раширением, без полного пути
//  АдресФайлаВоВременномХранилище - Строка (обязательное)(не пустое) - Адрес во временном хранилище гдя хранятся данные файла
//  ОписаниеОшибки - Строка (обязательное)(возможно пустое) - В данную переменную будет записан текст ошибки
//
// Возвращаемое значение:
//  Строка(50) - Идентификатор файла
//
Функция ЗагрузитьФайл(ИмяФайла, АдресФайлаВоВременномХранилище, ОписаниеОшибки) Экспорт
	
	ИДФайла = "";
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ДвоичныеДанные = ПодготовитьФайл(ИмяФайла, ДвоичныеДанныеФайла, Boundary);
		
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.ЗаписатьСтроку("");
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""checksum"""
		+ Символы.ПС);
	ЗаписьДанных.ЗаписатьСтроку(Коннект_ОбщегоНазначения.ПолучитьСуммуMD5Файла(ДвоичныеДанныеФайла, Истина));
	ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
	
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file_name"""
		+ Символы.ПС);
	ЗаписьДанных.ЗаписатьСтроку(ИмяФайла);
	ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
	
	РазмерФайлаОтправки = XMLСтрока(ПотокВПамяти.Размер());
	
	ТелоЗапроса = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	СерверПриемник = "filetransfer.buhphone.com";

	ДанныеАутентификации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

	HTTPСоединениеОтправкиФайла = Новый HTTPСоединение(СерверПриемник, , ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль, , , );

	ЗаголовокHTTP = Новый Соответствие();
	
	ЗаголовокHTTP.Вставить("Connection", "keep-alive");
	ЗаголовокHTTP.Вставить("Cache-Control", "max-age=0");
	
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки); 
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary + ";");

	ЗапросPOST = Новый HTTPЗапрос("/partner/api/upload/private/work", ЗаголовокHTTP);

	ЗапросPOST.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);

	Результат = HTTPСоединениеОтправкиФайла.ОтправитьДляОбработки(ЗапросPOST);

	Если Результат.КодСостояния = 200 Тогда

		СтрокаJSON = Результат.ПолучитьТелоКакСтроку();

		Если ЗначениеЗаполнено(СтрокаJSON) Тогда

			ЧтениеJSON = Новый ЧтениеJSON;

			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);

			РезультатJSON = ПрочитатьJSON(ЧтениеJSON, Истина);

			ЭлементData = РезультатJSON.Получить("data");

			Если ТипЗнч(ЭлементData) = Тип("Соответствие") Тогда

				ИДФайла = ЭлементData.Получить("file_id");

			КонецЕсли;

		КонецЕсли;
		
	Иначе
		Если Результат.КодСостояния = 413 Тогда
			ОписаниеОшибки = "Ошибка отправки файла: Превышен допустимый размер файла";
		ИначеЕсли Результат.КодСостояния = 401 Тогда
			ОписаниеОшибки = "Ошибка отправки файла: Неудачная попытка авторизации в облаке 1С-Коннкет";
		Иначе
			ОписаниеОшибки = "Ошибка загрузки файла в облако 1С-Коннект (HTTP status code " + Строка(Результат.КодСостояния) + ")";
		КонецЕсли;
	КонецЕсли;
	
	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("ИДФайла", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	СтрокаРезультата = ResultDataТаблица.Добавить();
	СтрокаРезультата.ИДФайла = ИДФайла;
	
	Возврат ResultDataТаблица;
	
КонецФункции

// Проверяет возможность соединения с API сервисом.
// 
// Параметры:
//  Логин - Строка(150) (не обязаельное) (не пустое) - Логин пользователя учетной системы 1С-Коннект с правом на API
//  Пароль - Строка (не обязаельное) (не пустое) - Пароль пользователя учетной системы 1С-Коннект с правом на API
//
// Возвращаемое значение:
//  Строка - Пустая строка, если подключение прошло или текст ошибки в противном случае
//
Функция ПроверитьПодключениеК1СКоннект(Логин = Неопределено, Пароль = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		Логин = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации().Логин;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		Пароль = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации().Пароль;
	КонецЕсли;
	
	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("Логин", Логин);
	ДанныеАвторизации.Вставить("Пароль", Пароль);
	
	ResultDataТаблица = Новый ТаблицаЗначений;
	ResultDataТаблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	СтрокаРезультата = ResultDataТаблица.Добавить();
	
	Попытка
		
		// Получим описание веб сервиса
		WSОпределение = Коннект_ОбщегоНазначения.WSОпределениеКоннект(ДанныеАвторизации);
		
		Если WSОпределение <> Неопределено Тогда
			СтрокаРезультата.Результат = "";
		КонецЕсли;
		
	Исключение
		
		СтрокаРезультата.Результат = "Не удалось установить соединение с облаком 1С-Коннект";
		
	КонецПопытки;
	
	Возврат ResultDataТаблица;
	
КонецФункции

// Создает связь между сотрудником в информационной системе компании и пользователем 1С-Коннект
//
// Параметры:
//  ИДСотрудникаКомпании - Строка(36) (обязательное)(не пустое) - Идентификатор сотрудника организации в информационной системе компании
//  ИДПользователя1СКоннект - Строка(36) (обязательное)(не пустое) - Идентификатор сотрудника организации в информационной системе 1С-Коннект
// 
// Возвращаемое значение:
//  Таблица значений:
//   Результат - Булево (обязательное) (не пустое) - Истина, если связь создана
//
Функция СвязатьСотрудников(ИДСотрудникаКомпании, ИДПользователя1СКоннект) Экспорт;
	
	РезультатТЗ = Новый ТаблицаЗначений;
	РезультатТЗ.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	СтрокаРезультата = РезультатТЗ.Добавить();
	СтрокаРезультата.Результат = Истина;
	
	Если Не ЗначениеЗаполнено(ИДСотрудникаКомпании) Тогда
		
		СтрокаРезультата.Результат = Ложь;
		Возврат РезультатТЗ;
		
	КонецЕсли;
	
	СтруктураСотрудника = Сотрудники().Найти(ИДПользователя1СКоннект, "ИДПользователя1СКоннект");
	
	Если СтруктураСотрудника = Неопределено Тогда
		
		СтрокаРезультата.Результат = Ложь;
		Возврат РезультатТЗ;
		
	КонецЕсли;
	
	
	// Получим информацию по сотруднику в конфигурации
	Сотрудники = ПолучитьСписокСотрудников();
	Сотрудник = Сотрудники.Найти(ИДСотрудникаКомпании, "УИД");
	Если Сотрудник = Неопределено Тогда
		
		СтрокаРезультата.Результат = Ложь;
		Возврат РезультатТЗ;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Коннект_СвязиСПользователями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИДСотрудникаКомпании.Установить(ИДСотрудникаКомпании);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ИДСотрудникаКомпании = ИДСотрудникаКомпании;
	Запись.Должность = Сотрудник.Должность;
	Запись.СотрудникКомпании = Сотрудник.СотрудникНаименование;
	Запись.ИДПользователя1СКоннект = СтруктураСотрудника.ИДПользователя1СКоннект;
	Запись.EMailИБ = Сотрудник.EMailИБ;
	Запись.ПомеченНаУдалениеСотрудникКомпании = Сотрудник.ПомеченНаУдалениеСотрудникКомпании;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Коннект_СвязиСПользователями.ПомеченНаУдалениеПользователь1СКоннект КАК ПомеченНаУдалениеПользователь1СКоннект
	|ИЗ
	|	РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
	|ГДЕ
	|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании = &ИДСотрудникаКомпании";
	
	Запрос.УстановитьПараметр("ИДСотрудникаКомпании", ИДСотрудникаКомпании);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Запись.ПомеченНаУдалениеПользователь1СКоннект = ВыборкаДетальныеЗаписи.ПомеченНаУдалениеПользователь1СКоннект;
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей.Записать();
		
	Исключение
		
		СтрокаРезультата.Результат = Ложь;
		Возврат РезультатТЗ;
		
	КонецПопытки;
	
	Возврат РезультатТЗ;
	
КонецФункции

// Разрывает связь между сотрудником в информационной системе компании и пользователем 1С-Коннект
//
// Параметры:
//  ИДСотрудникаКомпании - Строка(36) (обязательное)(не пустое) - Идентификатор сотрудника организации в информационной системе компании
// 
// Возвращаемое значение:
//  Таблица значений:
//   Результат - Булево (обязательное) (не пустое) - Истина, если связь разорвана
//
Функция РазорватьСвязьМеждуСотрудниками(ИДСотрудникаКомпании) Экспорт;
	
	Результат = Истина;
	
	НаборЗаписей = РегистрыСведений.Коннект_СвязиСПользователями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИДСотрудникаКомпании.Установить(ИДСотрудникаКомпании);
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	РезультатТЗ = Новый ТаблицаЗначений;
	РезультатТЗ.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	НоваяСтрока = РезультатТЗ.Добавить();
	НоваяСтрока.Результат = Результат;
	
	Возврат РезультатТЗ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьФайл(ИмяФайлаДанных,ДвоичныеДанныеФайла, Boundary)
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	//устанавливаем заголовки
	ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""payload""; filename="""
		+ ИмяФайлаДанных + """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/octet-stream");
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.Записать(ДвоичныеДанныеФайла);
	
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Процедура АктуализироватьСотрудников(Действие, ИДПользователя1СКоннект, ПользователиКУдалениюВосстановлению)
	
	Если Действие = "УдалитьСотрудника" Тогда
	
		УдалениеВосстановлениеУспешно = Коннект_ПрограммныйИнтерфейс.УдалитьСотрудника(ИДПользователя1СКоннект)[0].Результат;
		
	ИначеЕсли Действие = "ВосстановитьСотрудника" Тогда
		
		УдалениеВосстановлениеУспешно = Коннект_ПрограммныйИнтерфейс.ВосстановитьСотрудника(ИДПользователя1СКоннект)[0].Результат;
		
	КонецЕсли;
		
	Если УдалениеВосстановлениеУспешно Тогда
		
		СтруктураСотрудника = Новый Структура;
		СтруктураСотрудника.Вставить("ИДСотрудникаКомпании", ПользователиКУдалениюВосстановлению.ИДСотрудникаКомпании);
		СтруктураСотрудника.Вставить("ИДПользователя1СКоннект", Неопределено);
		СтруктураСотрудника.Вставить("СотрудникКомпании", ПользователиКУдалениюВосстановлению.СотрудникКомпании);
		СтруктураСотрудника.Вставить("EMailИБ", ПользователиКУдалениюВосстановлению.EMailИБ);
		СтруктураСотрудника.Вставить("ПомеченНаУдалениеСотрудникКомпании", ПользователиКУдалениюВосстановлению.ПомеченНаУдалениеСотрудникКомпании);
		СтруктураСотрудника.Вставить("ПомеченНаУдалениеПользователь1СКоннект", ПользователиКУдалениюВосстановлению.ПомеченНаУдалениеСотрудникКомпании);
		СтруктураСотрудника.Вставить("Должность", ПользователиКУдалениюВосстановлению.Должность);
		ДобавимЗаписьРегистрСвязиПользователя(СтруктураСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеРегистрСвязиПользователя()

	СписокПользователей = ПолучитьСписокСотрудников();

	Для Каждого СтрокаТаб Из СписокПользователей Цикл

		СтруктураСотрудника = Новый Структура;
		СтруктураСотрудника.Вставить("ИДСотрудникаКомпании", СтрокаТаб.УИД);
		СтруктураСотрудника.Вставить("СотрудникКомпании", СтрокаТаб.СотрудникНаименование);
		СтруктураСотрудника.Вставить("EMailИБ", СтрокаТаб.EMailИБ);
		СтруктураСотрудника.Вставить("ПомеченНаУдалениеСотрудникКомпании", СтрокаТаб.ПомеченНаУдалениеСотрудникКомпании);
		СтруктураСотрудника.Вставить("Должность", СтрокаТаб.Должность);
		ДобавимЗаписьРегистрСвязиПользователя(СтруктураСотрудника);

	КонецЦикла;

КонецПроцедуры

Функция ПолучимСвязиСПользователямиУдалениеВосстановление()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании КАК ИДСотрудникаКомпании,
		|	Коннект_СвязиСПользователями.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект,
		|	Коннект_СвязиСПользователями.СотрудникКомпании КАК СотрудникКомпании,
		|	Коннект_СвязиСПользователями.EMailИБ КАК EMailИБ,
		|	Коннект_СвязиСПользователями.ПомеченНаУдалениеСотрудникКомпании КАК ПомеченНаУдалениеСотрудникКомпании,
		|	Коннект_СвязиСПользователями.ПомеченНаУдалениеПользователь1СКоннект КАК ПомеченНаУдалениеПользователь1СКоннект,
		|	ВЫБОР
		|		КОГДА Коннект_СвязиСПользователями.ПомеченНаУдалениеСотрудникКомпании = Коннект_СвязиСПользователями.ПомеченНаУдалениеПользователь1СКоннект
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК УдалитьВосстановить,
		|	Коннект_СвязиСПользователями.Должность КАК Должность
		|ПОМЕСТИТЬ ВТ_СОтбором
		|ИЗ
		|	РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
		|ГДЕ
		|	Коннект_СвязиСПользователями.ИДПользователя1СКоннект <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СОтбором.ИДСотрудникаКомпании КАК ИДСотрудникаКомпании,
		|	ВТ_СОтбором.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект,
		|	ВТ_СОтбором.СотрудникКомпании КАК СотрудникКомпании,
		|	ВТ_СОтбором.EMailИБ КАК EMailИБ,
		|	ВТ_СОтбором.ПомеченНаУдалениеСотрудникКомпании КАК ПомеченНаУдалениеСотрудникКомпании,
		|	ВТ_СОтбором.ПомеченНаУдалениеПользователь1СКоннект КАК ПомеченНаУдалениеПользователь1СКоннект,
		|	ВТ_СОтбором.УдалитьВосстановить КАК УдалитьВосстановить,
		|	ВТ_СОтбором.Должность КАК Должность
		|ИЗ
		|	ВТ_СОтбором КАК ВТ_СОтбором
		|ГДЕ
		|	ВТ_СОтбором.УдалитьВосстановить = 0";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Возврат ВыборкаДетальныеЗаписи;

КонецФункции

// Заполняет регистр сведений "Связи с пользователями" новыми или обновленными данными по сотруднику
//
// Параметры:
// 	СтруктураСотрудника - Структура:
//  ИДСотрудникаКомпании - Строка 
//  СотрудникКомпании - Строка
//  EMailИБ - Строка
//  ПомеченНаУдалениеСотрудникКомпании - Булево 
//
Процедура ДобавимЗаписьРегистрСвязиПользователя(СтруктураСотрудника) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураСотрудника.ИДСотрудникаКомпании) Тогда
		
		НаборЗаписей = РегистрыСведений.Коннект_СвязиСПользователями.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИДСотрудникаКомпании.Установить(СтруктураСотрудника.ИДСотрудникаКомпании);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ИДСотрудникаКомпании = СтруктураСотрудника.ИДСотрудникаКомпании;
		Запись.Должность = СтруктураСотрудника.Должность;
		Запись.СотрудникКомпании = СтруктураСотрудника.СотрудникКомпании;
		Если СтруктураСотрудника.Свойство("ИДПользователя1СКоннект") Тогда
			Запись.ИДПользователя1СКоннект = СтруктураСотрудника.ИДПользователя1СКоннект;
		Иначе
			Запись.ИДПользователя1СКоннект = ПолучитьИДПользователя1сКоннект(СтруктураСотрудника.ИДСотрудникаКомпании);
		КонецЕсли;
		Запись.EMailИБ = СтруктураСотрудника.EMailИБ;
		Запись.ПомеченНаУдалениеСотрудникКомпании = СтруктураСотрудника.ПомеченНаУдалениеСотрудникКомпании;
		Если СтруктураСотрудника.Свойство("ПомеченНаУдалениеПользователь1СКоннект") Тогда
			Запись.ПомеченНаУдалениеПользователь1СКоннект = СтруктураСотрудника.ПомеченНаУдалениеПользователь1СКоннект;
		Иначе
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Коннект_СвязиСПользователями.ПомеченНаУдалениеПользователь1СКоннект КАК ПомеченНаУдалениеПользователь1СКоннект
				|ИЗ
				|	РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
				|ГДЕ
				|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании = &ИДСотрудникаКомпании";
			
			Запрос.УстановитьПараметр("ИДСотрудникаКомпании", СтруктураСотрудника.ИДСотрудникаКомпании);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Запись.ПомеченНаУдалениеПользователь1СКоннект = ВыборкаДетальныеЗаписи.ПомеченНаУдалениеПользователь1СКоннект;
			КонецЦикла;
	
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИДПользователя1сКоннект(ИДСотрудникаКомпании)
	
	ИДПользователя1сКоннект = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Коннект_СвязиСПользователями.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект
	|ИЗ
	|	РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
	|ГДЕ
	|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании = &ИДСотрудникаКомпании";
	
	Запрос.УстановитьПараметр("ИДСотрудникаКомпании", ИДСотрудникаКомпании);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ИДПользователя1СКоннект = ВыборкаДетальныеЗаписи.ИДПользователя1СКоннект;
	КонецЕсли;
	
	Возврат ИДПользователя1СКоннект;
	
КонецФункции

// Получаем список сотрудников с текущим видом кадрогового собятия (принят на работы, уволен)
//
Функция ПолучитьСписокСотрудников()

	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");

	Запрос = Новый Запрос;

	Если ИспользоватьКадровыйУчет Тогда

		Запрос.Текст = ТекстЗапросаСпискаРаботающихУволенныхСотрудниковСКадровымУчетом();

	Иначе

		Запрос.Текст = ТекстЗапросаСпискаРаботающихСотрудниковБезКадровогоУчета();

	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТЗ Из РезультатЗапроса Цикл

		СтрокаТЗ.УИД = СтрокаТЗ.Ссылка.УникальныйИдентификатор();

	КонецЦикла;

	Возврат РезультатЗапроса;

КонецФункции

Функция ТекстЗапросаСпискаРаботающихУволенныхСотрудниковСКадровымУчетом()

	Текст = "
		|	ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо.ДатаРождения КАК СотрудникФизическоеЛицоДатаРождения,
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.Ссылка КАК Ссылка,
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.Наименование КАК СотрудникНаименование,
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия КАК ВидСобытия,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК УИД,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|				ИЛИ КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ПометкаУдаления
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПомеченНаУдалениеСотрудникКомпании,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность.Наименование КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация.Наименование КАК Организация
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, ) КАК КадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	(КадроваяИсторияСотрудниковСрезПоследних.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ИЛИ КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|				ИЗ
		|					РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, ) КАК КадроваяИсторияСотрудниковСрезПоследних
		|				СГРУППИРОВАТЬ ПО
		|					КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо
		|				ИМЕЮЩИЕ
		|					КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КадроваяИсторияСотрудниковСрезПоследних.Сотрудник) = 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ ВТ_КонтактнаяИнформация
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Сотрудники.Ссылка.ФизическоеЛицо.Ссылка КАК СсылкаФизическоеЛицоСсылка
		|			ИЗ
		|				ВТ_Сотрудники КАК ВТ_Сотрудники)
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сотрудники.СотрудникФизическоеЛицоДатаРождения КАК СотрудникФизическоеЛицоДатаРождения,
		|	ВТ_Сотрудники.СотрудникНаименование КАК СотрудникНаименование,
		|	ВТ_Сотрудники.Ссылка КАК Ссылка,
		|	ВТ_Сотрудники.ВидСобытия КАК ВидСобытия,
		|	ВТ_Сотрудники.УИД КАК УИД,
		|	ВТ_Сотрудники.ПомеченНаУдалениеСотрудникКомпании КАК ПомеченНаУдалениеСотрудникКомпании,
		|	ВТ_КонтактнаяИнформация.Представление КАК EMailИБ,
		|	ВТ_Сотрудники.Должность КАК Должность
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК ВТ_КонтактнаяИнформация
		|		ПО ВТ_Сотрудники.Ссылка.ФизическоеЛицо = ВТ_КонтактнаяИнформация.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Сотрудники.Ссылка,
		|	ВТ_Сотрудники.СотрудникНаименование,
		|	ВТ_Сотрудники.СотрудникФизическоеЛицоДатаРождения,
		|	ВТ_Сотрудники.ВидСобытия,
		|	ВТ_Сотрудники.УИД,
		|	ВТ_Сотрудники.ПомеченНаУдалениеСотрудникКомпании,
		|	ВТ_КонтактнаяИнформация.Представление,
		|	ВТ_Сотрудники.Должность";

	Возврат Текст;

КонецФункции

Функция ТекстЗапросаСпискаРаботающихСотрудниковБезКадровогоУчета()

	Текст = "
		|ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо.ДатаРождения КАК СотрудникФизическоеЛицоДатаРождения,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник.Ссылка КАК Ссылка,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)) КАК ВидСобытия,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК УИД,
		|	ВЫБОР
		|		КОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) = ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|				ИЛИ ТекущиеКадровыеДанныеСотрудников.Сотрудник.ПометкаУдаления
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПомеченНаУдалениеСотрудникКомпании,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность.Наименование КАК Должность,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация.Наименование КАК Организация
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|				ИЗ
		|					РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|				СГРУППИРОВАТЬ ПО
		|					ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|				ИМЕЮЩИЕ
		|					КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеКадровыеДанныеСотрудников.Сотрудник) = 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ ВТ_КонтактнаяИнформация
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Сотрудники.Ссылка.ФизическоеЛицо.Ссылка КАК СсылкаФизическоеЛицоСсылка
		|			ИЗ
		|				ВТ_Сотрудники КАК ВТ_Сотрудники)
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КонтактнаяИнформация.Представление КАК EMailИБ,
		|	ВТ_Сотрудники.СотрудникФизическоеЛицоДатаРождения КАК СотрудникФизическоеЛицоДатаРождения,
		|	ВТ_Сотрудники.СотрудникНаименование КАК СотрудникНаименование,
		|	ВТ_Сотрудники.Ссылка КАК Ссылка,
		|	ВТ_Сотрудники.ВидСобытия КАК ВидСобытия,
		|	ВТ_Сотрудники.УИД КАК УИД,
		|	ВТ_Сотрудники.ПомеченНаУдалениеСотрудникКомпании КАК ПомеченНаУдалениеСотрудникКомпании,
		|	ВТ_Сотрудники.Должность КАК Должность
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК ВТ_КонтактнаяИнформация
		|		ПО ВТ_Сотрудники.Ссылка.ФизическоеЛицо = ВТ_КонтактнаяИнформация.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_КонтактнаяИнформация.Представление,
		|	ВТ_Сотрудники.СотрудникФизическоеЛицоДатаРождения,
		|	ВТ_Сотрудники.СотрудникНаименование,
		|	ВТ_Сотрудники.Ссылка,
		|	ВТ_Сотрудники.ВидСобытия,
		|	ВТ_Сотрудники.УИД,
		|	ВТ_Сотрудники.ПомеченНаУдалениеСотрудникКомпании,
		|	ВТ_Сотрудники.Должность";

	Возврат Текст;

КонецФункции

Процедура ПереименоватьКолонкиТЗ(ТаблицаЗначений, СоответствияИмен)
	
	Для Каждого Соответствие Из СоответствияИмен Цикл
		Колонка = ТаблицаЗначений.Колонки.Найти(Соответствие.СтароеНаименование);
		Если Колонка <> Неопределено Тогда
			Колонка.Имя = Соответствие.НовоеНаименование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляОтправкиФайла(Параметры, АдресХранилища) Экспорт
	
	// ИмяФайла, АдресФайлаВоВременномХранилище, ИДПолучателяПоддержки, ИДЛинииПоддержки, ИмяОтправителя,
	
	ОписаниеОшибки = Неопределено;
	
	ИДФайла = Коннект_ПрограммныйИнтерфейс.ЗагрузитьФайл(Параметры.ИмяФайла, Параметры.АдресФайлаВоВременномХранилище, ОписаниеОшибки)[0].ИДФайла;
	
	Если ОписаниеОшибки = Неопределено Тогда
		
		ОписаниеОшибки = Коннект_ПрограммныйИнтерфейс.ОтправитьФайл(Параметры.ИДПолучателяПоддержки, Параметры.ИДЛинииПоддержки, ИДФайла, Параметры.ИмяОтправителя)[0].ОписаниеОшибки;
		
		ПоместитьВоВременноеХранилище(ОписаниеОшибки, АдресХранилища);
		
	Иначе
		
		ПоместитьВоВременноеХранилище(ОписаниеОшибки, АдресХранилища);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти