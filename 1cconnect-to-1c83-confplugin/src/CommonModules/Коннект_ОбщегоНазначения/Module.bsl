// Раскладывает полное имя физического лица на составные части - фамилию, имя и отчество.
// Если в конце полного имени встречаются "оглы", "улы", "уулу", "кызы" или "гызы",
// то они также считаются частью отчества.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество".
//
// Возвращаемое значение:
//  Структура - части полного имени:
//   * Фамилия  - Строка - фамилия;
//   * Имя      - Строка - имя;
//   * Отчество - Строка - отчество.
//
// Пример:
//   1. ФизическиеЛицаКлиентСервер.ЧастиИмени("Иванов Иван Иванович") 
//   вернет структуру со значениями свойств: "Иванов", "Иван", "Иванович".
//   2. ФизическиеЛицаКлиентСервер.ЧастиИмени("Смит Джон") 
//   вернет структуру со значениями свойств: "Смит", "Джон", "".
//   3. ФизическиеЛицаКлиентСервер.ЧастиИмени("Алиев Ахмед Октай оглы Мамедов") 
//   вернет структуру со значениями свойств: "Алиев", "Алиев", "Октай оглы Мамедов".
//
Функция ЧастиИмени(ФамилияИмяОтчество) Экспорт

	Результат = Новый Структура("Фамилия,Имя,Отчество");

	ЧастиИмени = СтрРазделить(ФамилияИмяОтчество, " ", Ложь);

	Если ЧастиИмени.Количество() >= 1 Тогда
		Результат.Фамилия = СокрЛП(ЧастиИмени[0]);
	КонецЕсли;

	Если ЧастиИмени.Количество() >= 2 Тогда
		Результат.Имя = СокрЛП(ЧастиИмени[1]);
	КонецЕсли;

	Если ЧастиИмени.Количество() >= 3 Тогда
		Результат.Отчество = СокрЛП(ЧастиИмени[2]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Описание
// 
// Параметры:
// 	СтрокаURI
// Возвращаемое значение:
// 	Структура - Описание:
// * Схема 
// * Логин - Строка -
// * Пароль - Строка -
// * ИмяСервера - Строка -
// * Хост - Строка -
// * Порт - Число, Неопределено -
// * ПутьНаСервере - Строка -
Функция СтруктураURI(Знач СтрокаURI) Экспорт

	СтрокаURI = СокрЛП(СтрокаURI);

	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;

	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;

	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;

	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);

	Возврат Результат;

КонецФункции

Функция ПроверитьНаличиеСправочникаСотрудники() Экспорт

	ЕстьСправончикСотрудники = Метаданные.Справочники.Найти("Сотрудники");

	Если ЕстьСправончикСотрудники = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Добавляет UID ИБ в РегистрыСведений.Коннект_ИдентификаторБазы
// 
Процедура ДобавитьИдентификаторБазы() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Коннект_ИдентификаторБазы.ИдентификаторБазы КАК ИдентификаторБазы
		|ИЗ
		|	РегистрСведений.Коннект_ИдентификаторБазы КАК Коннект_ИдентификаторБазы";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		УИДРасширения = Строка(Новый УникальныйИдентификатор);

		УИДБазы = РегистрыСведений.Коннект_ИдентификаторБазы.СоздатьМенеджерЗаписи();
		УИДБазы.ИдентификаторБазы = УИДРасширения;
		УИДБазы.Прочитать();
		Если Не УИДБазы.Выбран() Тогда
			УИДБазы.ИдентификаторБазы = УИДРасширения;
			УИДБазы.Записать();
		КонецЕсли;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает UID расширения Коннект_Оповещения
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Описание
Функция ПолучитьИдентификаторБазы() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	УИДРасширения = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Коннект_ИдентификаторБазы.ИдентификаторБазы КАК ИдентификаторБазы
		|ИЗ
		|	РегистрСведений.Коннект_ИдентификаторБазы КАК Коннект_ИдентификаторБазы";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УИДРасширения = ВыборкаДетальныеЗаписи.ИдентификаторБазы;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат УИДРасширения;

КонецФункции

// Возвращает Адрес API сервиса 1C-Connect
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Описание
Функция ПолучитьСсылкуWSDL() Экспорт

	Возврат "https://cus.buhphone.com/cus/ws/BotAPI?wsdl";

КонецФункции

// Проверяет нужно ли открывать форму авторизации к облаку 1С-Коннект
// Форма авторизации открывается при условии, что данные авторизации не были заполнены
//
Функция ОткрытьФормуАвторизацииСервер() Экспорт

	Если Коннект_ОбщегоНазначения.ПравоЗаписиПараметровКоннект() Тогда

		ДанныеАвторизации = Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

		Если ЗначениеЗаполнено(ДанныеАвторизации.Логин)
				И ЗначениеЗаполнено(ДанныеАвторизации.Пароль) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ИДКонфигурации() Экспорт

	МетаданныеИмя = Метаданные.Имя;

	Если МетаданныеИмя = "БухгалтерияПредприятия" Тогда
		Возврат "БП";
	ИначеЕсли МетаданныеИмя = "КомплекснаяАвтоматизация" Тогда
		Возврат "КА";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИУправлениеПерсоналом" ИЛИ МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомКОРП" Тогда
		Возврат "ЗУП";
	ИначеЕсли МетаданныеИмя = "УправлениеПредприятием" Тогда
		Возврат "ERP";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "БПКОРП";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИКадрыГосударственногоУчреждения" Тогда
		Возврат "ЗИКГУ";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция РасписаниеРегламентногоЗаданияПоУмолчанию() Экспорт

	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);

	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание.ПериодПовтораДней = 1; // каждый день
	Расписание.Месяцы = Месяцы;

	Возврат Расписание;

КонецФункции

Функция ПолучитьСуммуMD5Файла(тСтрока, ЭтоДвоичныеДанные) Экспорт

	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);

	Если ЭтоДвоичныеДанные Тогда
		Хеш.Добавить(тСтрока);
	Иначе
		Хеш.ДобавитьФайл(тСтрока);
	КонецЕсли;

	СуммаMD5 = СтрЗаменить(Строка(Хеш.ХешСумма), " ", "");

	СуммаMD5 = НРег(СуммаMD5);

	Возврат СуммаMD5;

КонецФункции

Процедура СохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт

	Если ДанныеАутентификации = Неопределено Тогда

	// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());

		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Очищены данные аутентификации.'"));

	Иначе

	// Запись данных в безопасное хранилище
		ИДПодсистемы = ИдентификаторПодсистемы();
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИДПодсистемы, ДанныеАутентификации.Логин, "LoginConnect");

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИДПодсистемы, ДанныеАутентификации.Пароль, "PasswordConnect");
			ЗафиксироватьТранзакцию();

		Исключение
			ОтменитьТранзакцию();
			Коннект_ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;

		ЗаписатьИнформациюВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записаны данные аутентификации, логин ""%1"".'"), ДанныеАутентификации.Логин));

	КонецЕсли;

КонецПроцедуры

// Возвращает логин и пароль пользователя,
// сохраненные в информационной базе.
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Возвращаемое значение:
//	Структура - структура, содержащая логин и пароль пользователя
//		Интернет-поддержки:
//		* Логин - Строка - логин пользователя Интернет-поддержки;
//		* Пароль - Строка - пароль пользователя Интернет-поддержки.
//	Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ПолучитьДанныеАутентификации() Экспорт

	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы(), "LoginConnect,PasswordConnect");

	Если ДанныеВБезопасномХранилище.LoginConnect <> Неопределено
			И ДанныеВБезопасномХранилище.PasswordConnect <> Неопределено Тогда
		Возврат Новый Структура("Логин, Пароль", ДанныеВБезопасномХранилище.LoginConnect, ДанныеВБезопасномХранилище.PasswordConnect);
	КонецЕсли;

	Возврат Новый Структура("Логин, Пароль");

КонецФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт

	Возврат "Коннект_Автооповещения";

КонецФункции

// Записывает в журнал регистрации сообщение информации
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	Сообщение - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение,
		Данные = Неопределено) Экспорт

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииКоннектИнформация(), УровеньЖурналаРегистрации.Информация, , Данные, Сообщение);

КонецПроцедуры

// Возвращается имя события журнала регистрации для записи информационных
// сообщений Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события информационного сообщения Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииКоннектИнформация()

	Возврат НСтр("ru = 'Автооповещения Коннект.Информация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииКоннектОшибка()

	Возврат НСтр("ru = 'Автооповещения Коннект.Ошибка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке,
		Данные = Неопределено) Экспорт

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииКоннектОшибка(), УровеньЖурналаРегистрации.Ошибка, , Данные, СообщениеОбОшибке);

КонецПроцедуры

// Описание
// 
// Параметры:
// Возвращаемое значение:
// 	Булево - Описание
Функция ПравоЗаписиПараметровКоннект() Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
КонецФункции

Функция WSОпределениеКоннект(ДанныеАвторизации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	СсылкаWSDL = Коннект_ОбщегоНазначения.ПолучитьСсылкуWSDL();
	
	СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровОС;
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL( , СертификатыУдостоверяющихЦентров);
	WSОпределение = Новый WSОпределения(СсылкаWSDL, ДанныеАвторизации.Логин, ДанныеАвторизации.Пароль, , , ЗащищенноеСоединение);

	Возврат WSОпределение;
	
КонецФункции

// Установить соединение для вызова веб-сервиса с 1С-Коннект
//
// Параметры:
//  ДанныеАвторизации - Структура
//    Логин - Строка  
//    Пароль - Строка
//
Функция WSПроксиКоннект(ДанныеАвторизации) Экспорт
		
	WSОпределение = WSОпределениеКоннект(ДанныеАвторизации);
	
	Сервис = WSОпределение.Сервисы[0];
	
	СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровОС;
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение( , СертификатыУдостоверяющихЦентров);
	
	WSПрокси = Новый WSПрокси(WSОпределение, Сервис.URIПространстваИмен, Сервис.Имя, Сервис.ТочкиПодключения[0].Имя, , , ЗащищенноеСоединение);
	WSПрокси.Пользователь = ДанныеАвторизации.Логин;
	WSПрокси.Пароль = ДанныеАвторизации.Пароль;
	
	Возврат WSПрокси;
	
КонецФункции
