
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;
 
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИДКонфигурации = Коннект_ОбщегоНазначения.ИДКонфигурации();
	
	ЕстьСправончикСотрудники = Коннект_ОбщегоНазначения.ПроверитьНаличиеСправочникаСотрудники();
	
	Если ИДКонфигурации = "" ИЛИ НЕ ЕстьСправончикСотрудники Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данная конфигурация не предназначена для работы с этим расширением");
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	Коннект_ОбщегоНазначения.ДобавитьИдентификаторБазы();
	
	ОбновитьДанныеНаФорме();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьДанныеПоСотрудникамСервер();

	ОткрытьФормаОбновлениеРасширения = ПолучитьДанныеССервера1СКоннект();
	
	УстановитьДоступностьКнопкиСоздатРазорватьСвязь(Ложь);

	Если ОткрытьФормаОбновлениеРасширения Тогда

		ОткрытьФорму("Обработка.Коннект_ОбновлениеРасширения.Форма.ФормаОбновлениеРасширения", , , , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Отказ = Истина;
	
	Иначе

		Если ОткрытьФормуАвторизацииСервер() Тогда

			ПолучитьСписокПользователейКлиент();
			
		Иначе
			РазрешитьРедактированиеФормы(Ложь);
		КонецЕсли;

	КонецЕсли;

	ОбновитьДанныеАвторизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ПользователиДляРассылкиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСоздатРазорватьСвязь();
	
КонецПроцедуры

&НаКлиенте
Процедура НеСопоставленныеПользователи1СКоннектПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСоздатРазорватьСвязь();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьАккаунт(Команда)

	ТекущиеДанныеСотрудники = Элементы.ПользователиДляРассылки.ВыделенныеСтроки;

	Для Каждого ИдентификаторСтроки Из ТекущиеДанныеСотрудники Цикл
		ВыделеннаяСтрока = Объект.ПользователиДляРассылки.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ВыделеннаяСтрока = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите сотрудника");
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыделеннаяСтрока.EMailИБ) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У сотрудника не заполнен E-mail");
			Возврат;
		КонецЕсли;

		Если ЗначениеЗаполнено(ВыделеннаяСтрока.ИДПользователя1СКоннект) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У сотрудника уже создан пользователь 1С-Коннект");
			Возврат;
		КонецЕсли;
	
		СоздатьАккаунтСотрудника(ВыделеннаяСтрока);
	КонецЦикла;
	
	ПолучитьСписокПользователейКлиент();

КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыАвторизации", ЭтотОбъект);

	ОткрытьФорму("ОбщаяФорма.Коннект_ФормаАвторизации", , ЭтаФорма, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура Выйти(Команда)
	
	УдалитьДанныеАутентификации();

	ОбновитьДанныеАвторизации();
	
	РазрешитьРедактированиеФормы(Ложь);

	ОчиститьДанныеНаФорме();
	
	УстановитьДоступностьКнопкиСоздатРазорватьСвязь(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеДляВосстановленияУдаленияПользователей1СКоннект(Команда)

// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗаданияПользователи = Неопределено Тогда

		РасписаниеРегламентногоЗаданияПользователи = Новый РасписаниеРегламентногоЗадания;

	КонецЕсли;

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияПользователи);

	// Открываем диалог для редактирования Расписания.
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершениеКлиентПользователи", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияАвтообновления(Команда)

// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗаданияОбновление = Неопределено Тогда

		РасписаниеРегламентногоЗаданияОбновление = Новый РасписаниеРегламентногоЗадания;

	КонецЕсли;

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияОбновление);

	// Открываем диалог для редактирования Расписания.
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершениеКлиентАвтообновление", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПользователиДляРассылкиОбновить(Команда)

	ПолучитьСписокПользователейКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбновленияРасширения(Команда)

	ОткрытьФорму("Обработка.Коннект_ОбновлениеРасширения.Форма.ФормаОбновлениеРасширения", , ЭтаФорма, , , , , );

КонецПроцедуры

&НаКлиенте
Процедура СвязатьВыделенные()
	
	ТекущиеДанныеСотрудники = Элементы.ПользователиДляРассылки.ТекущиеДанные;
	ТекущиеДанныеНесопоставленыеПользователи = Элементы.НеСопоставленныеПользователи1СКоннект.ТекущиеДанные;
	
	Если ТекущиеДанныеСотрудники = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите сотрудника");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНесопоставленыеПользователи = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите несопоставленного пользователя");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанныеСотрудники, ТекущиеДанныеНесопоставленыеПользователи);
	
	СвязатьСотрудниковСервер(ТекущиеДанныеСотрудники.ИДСотрудникаКомпании, ТекущиеДанныеСотрудники.ИДПользователя1СКоннект);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Аккаунт успешно сопоставлен для " + ТекущиеДанныеСотрудники.СотрудникКомпании);
	
	ПолучитьСписокНеСопоставленныхСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязь()

	ТекущиеДанныеСотрудники = Элементы.ПользователиДляРассылки.ТекущиеДанные;
	ТекущиеДанныеСотрудники.Фамилия = "";
	ТекущиеДанныеСотрудники.Имя = "";
	ТекущиеДанныеСотрудники.Отчество = "";
	ТекущиеДанныеСотрудники.EMail = "";
	ТекущиеДанныеСотрудники.ИДПользователя1СКоннект = "";
	ТекущиеДанныеСотрудники.ФИО = "";
	ТекущиеДанныеСотрудники.Логин = "";

	РазорватьСвязьМеждуСотрудникамиСервер(ТекущиеДанныеСотрудники.ИДСотрудникаКомпании);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сопоставление аккаунта отменено для " + ТекущиеДанныеСотрудники.СотрудникКомпании);

	ПолучитьСписокНеСопоставленныхСотрудников();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРазорватьСвязь(Команда)
	
	Если Элементы.ПользователиДляРассылки.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ПользователиДляРассылки.ТекущиеДанные.Логин) Тогда
		РазорватьСвязь();
	Иначе
		СвязатьВыделенные();
	КонецЕсли;
	УстановитьДоступностьКнопкиСоздатРазорватьСвязь();
	
КонецПроцедуры

&НаКлиенте
Процедура Тестировать(Команда)

	ТекущийПользовательСтруктура = Новый Структура;
	
	Если Элементы.ПользователиДляРассылки.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ПользователиДляРассылки.ТекущиеДанные.Логин) Тогда
		ТекущийПользовательСтруктура.Вставить("Сотрудник", Элементы.ПользователиДляРассылки.ТекущиеДанные.СотрудникКомпании);
	КонецЕсли;
	ОткрытьФорму("Обработка.Коннект_Тестирование.Форма.Форма",ТекущийПользовательСтруктура, ЭтаФорма, , , , , );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОткрытьФормуАвторизацииСервер()
	
	Возврат Коннект_ОбщегоНазначения.ОткрытьФормуАвторизацииСервер();
	
КонецФункции

&НаКлиенте
Процедура СоздатьАккаунтСотрудника(СтрокаСотрудника) Экспорт
	
	ФИОСотрудника = ЧастиИмениСервер(СтрокаСотрудника.СотрудникКомпании);
	
	ИДПользователя1сКоннект = ОтправитьЗапросНаДобавлениеСотрудника(ФИОСотрудника.Имя, ФИОСотрудника.Фамилия, ФИОСотрудника.Отчество, СтрокаСотрудника.EMailИБ);
	
	СвязатьСотрудниковСервер(СтрокаСотрудника.ИДСотрудникаКомпании, ИДПользователя1СКоннект);
	
КонецПроцедуры

&НаСервере
Функция ЧастиИмениСервер(СотрудникКомпании)

	Возврат Коннект_ОбщегоНазначения.ЧастиИмени(СотрудникКомпании);
 
КонецФункции 

&НаСервере
Функция ПолучитьДанныеССервера1СКоннект()

	Результат = Коннект_Автообновление.ПолучитьФайлОбновления(Ложь);

	Если ТипЗнч(Результат) <> Тип("Структура") ИЛИ Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура УдалитьДанныеАутентификации() Экспорт

	УдалитьДанныеАутентификацииСервер();
 
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеАутентификацииСервер()

	Коннект_ОбщегоНазначения.СохранитьДанныеАутентификации(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеУдаленияДанныхАутентификации(Результат,	ДополнительныеПараметры) Экспорт

	ОбновитьДанныеАвторизации();

	РазрешитьРедактированиеФормы(Ложь);

	ОчиститьДанныеНаФорме();

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеНаФорме()

	Объект.ПользователиДляРассылки.Очистить();
	НеСопоставленныеПользователи1СКоннект.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеФормы(Разрешить)

	ТолькоПросмотрДанных = НЕ Разрешить;
	ДоступностьДанных = Разрешить;
	Элементы.ПользователиДляРассылки.ТолькоПросмотр = ТолькоПросмотрДанных;
	Элементы.НеСопоставленныеПользователи1СКоннект.ТолькоПросмотр = ТолькоПросмотрДанных;
	Элементы.ПользователиДляРассылкиСоздатьАккаунт.Доступность = ДоступностьДанных;
	Элементы.ПользователиДляРассылкиТестировать.Доступность = ДоступностьДанных;
	Элементы.ПользователиДляРассылкиПользователиДляРассылкиОбновить.Доступность = ДоступностьДанных;
	Элементы.НеСопоставленныеПользователи1СКоннектПользователиДляРассылкиОбновить.Доступность = ДоступностьДанных;
	Элементы.НастроитьРасписаниеРегламентногоЗаданияАвтообновления.Доступность = ДоступностьДанных;
	Элементы.ОткрытьФормуОбновленияРасширения.Доступность = ДоступностьДанных;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокПользователейКлиент()
	
	ДанныеАутентификации = ПолучитьДанныеАутентификации();

	ОписаниеОшибки = ПроверитьПодключениеК1СКоннектСервер();

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);

		РазрешитьРедактированиеФормы(Ложь);
		
	Иначе

		Если ЗначениеЗаполнено(ДанныеАутентификации.Логин) И ЗначениеЗаполнено(ДанныеАутентификации.Пароль) Тогда

			ОбработатьДанныеПоСотрудникамСервер();

			Если ПолучитьСписокСотрудниковСервер() Тогда

				ОбновитьДанныеАвторизации();

				РазрешитьРедактированиеФормы(Истина);

			Иначе

				РазрешитьРедактированиеФормы(Ложь);

			КонецЕсли;

		Иначе

			ОбновитьДанныеАвторизации();

			РазрешитьРедактированиеФормы(Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьПодключениеК1СКоннектСервер()

	Возврат Коннект_ПрограммныйИнтерфейс.ПроверитьПодключениеК1СКоннект()[0].Результат;

КонецФункции 

&НаСервере
Процедура ОбработатьДанныеПоСотрудникамСервер()

	Коннект_ПрограммныйИнтерфейс.ОбработатьДанныеПоСотрудникам();

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаСопоставленныхПользователей()

	Текст =
		"ВЫБРАТЬ
		|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании КАК ИДСотрудникаКомпании,
		|	Коннект_СвязиСПользователями.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект,
		|	Коннект_СвязиСПользователями.ПомеченНаУдалениеСотрудникКомпании КАК ПомеченНаУдалениеСотрудникКомпании,
		|	Коннект_СвязиСПользователями.СотрудникКомпании КАК СотрудникКомпании,
		|	Коннект_СвязиСПользователями.EMailИБ КАК EMailИБ,
		|	Коннект_СвязиСПользователями.Должность КАК Должность,
		|	Коннект_СвязиСПользователями.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_СотрудникиКомпании
		|ИЗ
		|	РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
		|ГДЕ
		|	НЕ Коннект_СвязиСПользователями.ПомеченНаУдалениеСотрудникКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаПользователейКоннект.ИДПользователя1СКоннект КАК СТРОКА(36)) КАК ИДПользователя1СКоннект,
		|	ТаблицаПользователейКоннект.Имя КАК Имя,
		|	ТаблицаПользователейКоннект.Фамилия КАК Фамилия,
		|	ТаблицаПользователейКоннект.Отчество КАК Отчество,
		|	ТаблицаПользователейКоннект.Email КАК Email,
		|	ТаблицаПользователейКоннект.Логин КАК Логин
		|ПОМЕСТИТЬ ВТ_ТаблицаПользователейКоннект
		|ИЗ
		|	&ТаблицаПользователейКоннект КАК ТаблицаПользователейКоннект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СотрудникиКомпании.ИДСотрудникаКомпании КАК ИДСотрудникаКомпании,
		|	ВТ_СотрудникиКомпании.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект,
		|	ВТ_СотрудникиКомпании.ПомеченНаУдалениеСотрудникКомпании КАК ПомеченНаУдалениеСотрудникКомпании,
		|	ВТ_СотрудникиКомпании.СотрудникКомпании КАК СотрудникКомпании,
		|	ВТ_СотрудникиКомпании.Должность КАК Должность,
		|	ВТ_СотрудникиКомпании.Организация КАК Организация,
		|	ВТ_ТаблицаПользователейКоннект.Имя КАК Имя,
		|	ВТ_ТаблицаПользователейКоннект.Фамилия КАК Фамилия,
		|	ВТ_ТаблицаПользователейКоннект.Отчество КАК Отчество,
		|	ВТ_ТаблицаПользователейКоннект.Email КАК Email,
		|	ВТ_ТаблицаПользователейКоннект.Логин КАК Логин,
		|	ВТ_СотрудникиКомпании.EMailИБ КАК EMailИБ,
		|	ЕСТЬNULL(ВТ_ТаблицаПользователейКоннект.Фамилия + "" "", """") + ЕСТЬNULL(ВТ_ТаблицаПользователейКоннект.Имя + "" "", """") + ЕСТЬNULL(ВТ_ТаблицаПользователейКоннект.Отчество, """") КАК ФИО
		|ИЗ
		|	ВТ_СотрудникиКомпании КАК ВТ_СотрудникиКомпании
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПользователейКоннект КАК ВТ_ТаблицаПользователейКоннект
		|		ПО ВТ_СотрудникиКомпании.ИДПользователя1СКоннект = ВТ_ТаблицаПользователейКоннект.ИДПользователя1СКоннект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	СотрудникКомпании";

	Возврат Текст;

КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаНесопоставленныхПользователей()

	Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаПользователейКоннект.ИДПользователя1СКоннект КАК СТРОКА(36)) КАК ИДПользователя1СКоннект,
		|	ТаблицаПользователейКоннект.Имя КАК Имя,
		|	ТаблицаПользователейКоннект.Фамилия КАК Фамилия,
		|	ТаблицаПользователейКоннект.Отчество КАК Отчество,
		|	ТаблицаПользователейКоннект.Email КАК Email,
		|	ТаблицаПользователейКоннект.Логин КАК Логин
		|ПОМЕСТИТЬ ВТ_ТаблицаПользователейКоннект
		|ИЗ
		|	&ТаблицаПользователейКоннект КАК ТаблицаПользователейКоннект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПользователейКоннект.Имя КАК Имя,
		|	ВТ_ТаблицаПользователейКоннект.Фамилия КАК Фамилия,
		|	ВТ_ТаблицаПользователейКоннект.Отчество КАК Отчество,
		|	ВТ_ТаблицаПользователейКоннект.Email КАК Email,
		|	ВТ_ТаблицаПользователейКоннект.ИДПользователя1СКоннект КАК ИДПользователя1СКоннект,
		|	ВТ_ТаблицаПользователейКоннект.Логин КАК Логин,
		|	ЕСТЬNULL(ВТ_ТаблицаПользователейКоннект.Фамилия + "" "", """") + ЕСТЬNULL(ВТ_ТаблицаПользователейКоннект.Имя + "" "", """") + ЕСТЬNULL(ВТ_ТаблицаПользователейКоннект.Отчество, """") КАК ФИО,
		|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании КАК ИДСотрудникаКомпании
		|ИЗ
		|	ВТ_ТаблицаПользователейКоннект КАК ВТ_ТаблицаПользователейКоннект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Коннект_СвязиСПользователями КАК Коннект_СвязиСПользователями
		|		ПО ВТ_ТаблицаПользователейКоннект.ИДПользователя1СКоннект = Коннект_СвязиСПользователями.ИДПользователя1СКоннект
		|ГДЕ
		|	Коннект_СвязиСПользователями.ИДСотрудникаКомпании ЕСТЬ NULL";

	Возврат Текст;

КонецФункции

&НаСервере
Функция ПолучитьСписокСотрудниковСервер()

	ОчиститьДанныеНаФорме();

	СписокПользователейКоннект = Коннект_ПрограммныйИнтерфейс.Сотрудники();
	
	Если СписокПользователейКоннект <> Неопределено Тогда
	
		ЗапросСопоставленных = Новый Запрос;

		ЗапросСопоставленных.Текст = ПолучитьТекстЗапросаСопоставленныхПользователей();
		
		ЗапросСопоставленных.УстановитьПараметр("ТаблицаПользователейКоннект", СписокПользователейКоннект);

		РезультатЗапросаСопоставленных = ЗапросСопоставленных.Выполнить();

		СписокСопоставленныхПользователей = РезультатЗапросаСопоставленных.Выгрузить();
		
		Объект.ПользователиДляРассылки.Загрузить(СписокСопоставленныхПользователей);
		
		ЗапросНесопоставленных = Новый Запрос;

		ЗапросНесопоставленных.Текст = ПолучитьТекстЗапросаНесопоставленныхПользователей();
		
		ЗапросНесопоставленных.УстановитьПараметр("ТаблицаПользователейКоннект", СписокПользователейКоннект);

		РезультатЗапросаНесопоставленных = ЗапросНесопоставленных.Выполнить();

		СписокНесопоставленныхПользователей = РезультатЗапросаНесопоставленных.Выгрузить();

		НеСопоставленныеПользователи1СКоннект.Загрузить(СписокНесопоставленныхПользователей);

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьЭлементОбработкиАвтооповещенийИзДополнительныхОтчетовИОбработкокПользователи()

	СправочникСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", "Коннект_РегламентнаяОперацияУдалениеВосстановлениеПользователей");

	// Обновление/добавление.
	Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
		Возврат Неопределено;
	Иначе
		Возврат СправочникСсылка;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОповещенияПродолжитьРаботуСФормой(Результат,
		ДополнительныеПараметры) Экспорт

	Если НЕ ОткрытьФормуАвторизацииСервер() Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещенияПолучитьСписокПользователей", ЭтотОбъект);

		ОткрытьФорму("ОбщаяФорма.Коннект_ФормаАвторизации", , , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	Иначе

		ПолучитьСписокПользователейКлиент();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещенияПолучитьСписокПользователей(Результат,
		ДополнительныеПараметры) Экспорт

	ПолучитьСписокПользователейКлиент();

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтчетыИОбработкиПользователи(Расписание)

	ДвоичныеДанные = Обработки.Коннект_РегламентнаяОперацияУдалениеВосстановлениеПользователей.ПолучитьМакет("Макет");

	СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
	СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
	СправочникОбъект.ИспользоватьДляФормыСписка = Истина;
	СправочникОбъект.Ответственный = Пользователи.ТекущийПользователь();

	ЭтоОтчет = Ложь;
	АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Менеджер = ВнешниеОбработки;
	Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
		ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Иначе
		ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина);
	КонецЕсли;
	ВнешнийОбъект = Менеджер.Создать(ИмяОбъекта);

	ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
	ОбработкаСведения = Новый Структура("Наименование, БезопасныйРежим, Версия, Информация");
	Если ОбработкаСведения.Наименование = Неопределено
			ИЛИ ОбработкаСведения.Информация = Неопределено Тогда
		Если ОбработкаСведения.Наименование = Неопределено Тогда
			ОбработкаСведения.Наименование = ВнешнийОбъектМетаданные.Представление();
		КонецЕсли;
		Если ОбработкаСведения.Информация = Неопределено Тогда
			ОбработкаСведения.Информация = ВнешнийОбъектМетаданные.Комментарий;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СправочникОбъект, ОбработкаСведения, "Наименование, БезопасныйРежим, Версия, Информация");

	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("АдресДанныхОбработки", АдресДанных);
	ПараметрыРегистрации.Вставить("ЭтоОтчет", ЭтоОтчет);
	ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
	ПараметрыРегистрации.Вставить("ИмяФайла", "Коннект_РегламентнаяОперацияУдалениеВосстановлениеПользователей.epf");
	ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);

	СправочникОбъект.ИмяОбъекта = Неопределено;
	СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	СправочникОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;

	Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	Если Не Результат.Успех И Результат.ИмяОбъектаЗанято Тогда
		ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Истина);
		ПараметрыРегистрации.Вставить("Конфликтующие", Результат.Конфликтующие);
		Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	КонецЕсли;
	Если Не Результат.Успех Тогда
		Если Результат.ИмяОбъектаЗанято Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя ""%1"" занято объектами ""%2""'"), ИмяОбъекта, Строка(Результат.Конфликтующие));
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Ложь), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМакеты.Найти("Коннект_РегламентнаяОперацияУдалениеВосстановлениеПользователей"), , Результат.ТекстОшибки);

	КонецЕсли;

	СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанные);
	СправочникОбъект.ИмяОбъекта = ВнешнийОбъектМетаданные.Имя;
	СправочникОбъект.ИмяФайла = "Коннект_РегламентнаяОперацияУдалениеВосстановлениеПользователей";

	ЗапишемРегламентноеЗадание(СправочникОбъект, Расписание, Ложь);

	Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(СправочникОбъект.Вид) Тогда
		ТаблицаОбъектовМетаданных = ДополнительныеОтчетыИОбработки.ПодключенныеОбъектыМетаданных(СправочникОбъект.Вид);
		Для Каждого СтрокаТаблицы Из ТаблицаОбъектовМетаданных Цикл
			РазделСсылка = СтрокаТаблицы.Ссылка;
			СтрокаРаздела = СправочникОбъект.Разделы.Найти(РазделСсылка, "Раздел");
			Если СтрокаРаздела = Неопределено Тогда
			//СтрокаРаздела = СправочникОбъект.Разделы.Добавить();
				//СтрокаРаздела.Раздел = РазделСсылка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ОписаниеНазначения Из ОбработкаСведения.Назначение Цикл
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеНазначения);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектНазначенияСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			СтрокаНазначения = СправочникОбъект.Назначение.Найти(ОбъектНазначенияСсылка, "ОбъектНазначения");
			Если СтрокаНазначения = Неопределено Тогда
				СтрокаНазначения = СправочникОбъект.Назначение.Добавить();
				СтрокаНазначения.ОбъектНазначения = ОбъектНазначенияСсылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтчетыИОбработкиАвтообноление(Расписание)

	ДвоичныеДанные = Обработки.Коннект_ОбновлениеРасширения.ПолучитьМакет("Макет");

	СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
	СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
	СправочникОбъект.ИспользоватьДляФормыСписка = Истина;
	СправочникОбъект.Ответственный = Пользователи.ТекущийПользователь();

	ЭтоОтчет = Ложь;
	АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Менеджер = ВнешниеОбработки;
	Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
		ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Иначе
		ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина);
	КонецЕсли;
	ВнешнийОбъект = Менеджер.Создать(ИмяОбъекта);

	ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
	ОбработкаСведения = Новый Структура("Наименование, БезопасныйРежим, Версия, Информация");
	Если ОбработкаСведения.Наименование = Неопределено
			ИЛИ ОбработкаСведения.Информация = Неопределено Тогда
		Если ОбработкаСведения.Наименование = Неопределено Тогда
			ОбработкаСведения.Наименование = ВнешнийОбъектМетаданные.Представление();
		КонецЕсли;
		Если ОбработкаСведения.Информация = Неопределено Тогда
			ОбработкаСведения.Информация = ВнешнийОбъектМетаданные.Комментарий;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СправочникОбъект, ОбработкаСведения, "Наименование, БезопасныйРежим, Версия, Информация");

	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("АдресДанныхОбработки", АдресДанных);
	ПараметрыРегистрации.Вставить("ЭтоОтчет", ЭтоОтчет);
	ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
	ПараметрыРегистрации.Вставить("ИмяФайла", "Коннект_ОбновлениеРасширения.epf");
	ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);

	СправочникОбъект.ИмяОбъекта = Неопределено;
	СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	СправочникОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;

	Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	Если Не Результат.Успех И Результат.ИмяОбъектаЗанято Тогда
		ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Истина);
		ПараметрыРегистрации.Вставить("Конфликтующие", Результат.Конфликтующие);
		Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	КонецЕсли;
	Если Не Результат.Успех Тогда
		Если Результат.ИмяОбъектаЗанято Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя ""%1"" занято объектами ""%2""'"), ИмяОбъекта, Строка(Результат.Конфликтующие));
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Ложь), УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМакеты.Найти("Коннект_ОбновлениеРасширения"), , Результат.ТекстОшибки);

	КонецЕсли;

	СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанные);
	СправочникОбъект.ИмяОбъекта = ВнешнийОбъектМетаданные.Имя;
	СправочникОбъект.ИмяФайла = "Коннект_ОбновлениеРасширения";

	ЗапишемРегламентноеЗадание(СправочникОбъект, Расписание, Ложь);

	Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(СправочникОбъект.Вид) Тогда
		ТаблицаОбъектовМетаданных = ДополнительныеОтчетыИОбработки.ПодключенныеОбъектыМетаданных(СправочникОбъект.Вид);
		Для Каждого СтрокаТаблицы Из ТаблицаОбъектовМетаданных Цикл
			РазделСсылка = СтрокаТаблицы.Ссылка;
			СтрокаРаздела = СправочникОбъект.Разделы.Найти(РазделСсылка, "Раздел");
			Если СтрокаРаздела = Неопределено Тогда
			//СтрокаРаздела = СправочникОбъект.Разделы.Добавить();
				//СтрокаРаздела.Раздел = РазделСсылка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ОписаниеНазначения Из ОбработкаСведения.Назначение Цикл
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеНазначения);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектНазначенияСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			СтрокаНазначения = СправочникОбъект.Назначение.Найти(ОбъектНазначенияСсылка, "ОбъектНазначения");
			Если СтрокаНазначения = Неопределено Тогда
				СтрокаНазначения = СправочникОбъект.Назначение.Добавить();
				СтрокаНазначения.ОбъектНазначения = ОбъектНазначенияСсылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);

КонецПроцедуры

Процедура ЗапишемРегламентноеЗадание(Ссылка, Расписание, УдалитьЗадание = Ложь)

//Расписание = Новый РасписаниеРегламентногоЗадания;
	//Расписание.ПериодПовтораВТечениеДня	= 300;
	//Расписание.ПериодПовтораДней = 1;
	ТаблицаКоманд = Ссылка.Команды;

	//ЗаданияДляОбновления = Новый Соответствие;

	//ПубликацияВключена = Истина;

	// Регламентные задания необходимо изменять в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);

	// Очистка заданий по командам, которые были удалены из таблицы.
	Для Каждого СтараяКоманда Из Ссылка.Команды Цикл
		Если (ЗначениеЗаполнено(СтараяКоманда.РегламентноеЗаданиеGUID)
				И ТаблицаКоманд.Найти(СтараяКоманда.РегламентноеЗаданиеGUID, "РегламентноеЗаданиеGUID") = Неопределено)
				ИЛИ УдалитьЗадание Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(СтараяКоманда.РегламентноеЗаданиеGUID);
		КонецЕсли;
	КонецЦикла;

	Использование = Истина;

	// Актуализация набора регламентных заданий для записи их идентификаторов в табличную часть.
	Для Каждого АктуальнаяКоманда Из ТаблицаКоманд Цикл
	//Команда = Команды.Найти(АктуальнаяКоманда.Идентификатор, "Идентификатор");
		Задание = РегламентныеЗаданияСервер.Задание(АктуальнаяКоманда.РегламентноеЗаданиеGUID);
		Если Задание = Неопределено Тогда // Не найдено
			Если Использование Тогда
			// Создать и зарегистрировать.
				ПараметрыЗадания = Новый Структура;
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
				ПараметрыЗадания.Вставить("Использование", Истина);
				ПараметрыЗадания.Вставить("Расписание", Расписание);
				Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
				//Задание.Записать();
				//ЗаданияДляОбновления.Вставить(АктуальнаяКоманда, Задание);
				АктуальнаяКоманда.РегламентноеЗаданиеGUID = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
			Иначе
			// Действие не требуется
			КонецЕсли;
		Иначе // Найдено
			Если Использование Тогда
			// Зарегистрировать.
				//ЗаданияДляОбновления.Вставить(АктуальнаяКоманда, Задание);
			Иначе
			// Удалить.
				РегламентныеЗаданияСервер.УдалитьЗадание(АктуальнаяКоманда.РегламентноеЗаданиеGUID);
				АктуальнаяКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания() Экспорт
 
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = "" Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание для отправки данных в 1С-Коннект не задано'");
	Иначе
		ПредставлениеРасписания = НСтр("ru = 'Расписание для отправки данных в 1С-Коннект: "
			+ ПредставлениеРасписания + "'");
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;

	ПредставлениеРасписанияПользователи = Строка(РасписаниеРегламентногоЗаданияПользователи);
	Если ПредставлениеРасписанияПользователи = "" Тогда
		ПредставлениеРасписанияПользователи = НСтр("ru = 'Расписание для восстановления удаления пользователей в 1С-Коннект не задано'");
	Иначе
		ПредставлениеРасписанияПользователи = НСтр("ru = 'Расписание для восстановления удаления пользователей в 1С-Коннект: "
			+ ПредставлениеРасписанияПользователи + "'");
	КонецЕсли;
	//Элементы.РасписаниеДляВосстановленияУдаленияПользователей1СКоннект.Заголовок = ПредставлениеРасписанияПользователи;

	ПредставлениеРасписанияАвтообновления = Строка(РасписаниеРегламентногоЗаданияОбновление);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыАвторизации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = "КомандаОтмена" Тогда
		ДанныеАутентификации = ПолучитьДанныеАутентификации();
		
		ОбновитьДанныеАвторизации(ДанныеАутентификации);
		
		Если ЗначениеЗаполнено(ДанныеАутентификации.Логин) Тогда
			РазрешитьРедактированиеФормы(Истина);
		Иначе
			РазрешитьРедактированиеФормы(Ложь);
		КонецЕсли;
		
		ОчиститьДанныеНаФорме();
			
		ПолучитьСписокПользователейКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеАвторизации(ДанныеАутентификации = Неопределено)

	Если ДанныеАутентификации = Неопределено Тогда
		ДанныеАутентификации = ПолучитьДанныеАутентификации();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеАутентификации.Логин) Тогда
		ЭтаФорма.Элементы.Авторизация.Заголовок = "Подключиться";
		ЭтаФорма.Элементы.Авторизация.Видимость = Истина;
		ЭтаФорма.Элементы.Авторизация.Доступность = Истина;
		ЭтаФорма.Элементы.Выйти.Видимость = Ложь;
	Иначе
		ЭтаФорма.Элементы.Авторизация.Заголовок = ДанныеАутентификации.Логин;
		ЭтаФорма.Элементы.Авторизация.Видимость = Истина;
		ЭтаФорма.Элементы.Авторизация.Доступность = Ложь;
		ЭтаФорма.Элементы.Выйти.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаФорме()
	
	//Обновление расширения
	СправочникСсылкаРегЗадание = ПолучитьЭлементОбработкиАвтооповещенийИзДополнительныхОтчетовИОбработкокАвтообновление();
	
	Если СправочникСсылкаРегЗадание <> Неопределено Тогда
		
		Для Каждого Строка Из СправочникСсылкаРегЗадание.Команды Цикл
			
			Если Строка.Идентификатор = "РегламентнаяОперацияАвтообнолениеРасширения" Тогда
				Задание = РегламентныеЗаданияСервер.Задание(Строка.РегламентноеЗаданиеGUID);
				РасписаниеРегламентногоЗаданияОбновление = Задание.Расписание;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Обновление расширения
	СправочникСсылкаРегЗаданиеПользователи = ПолучитьЭлементОбработкиАвтооповещенийИзДополнительныхОтчетовИОбработкокПользователи();
	
	Если СправочникСсылкаРегЗаданиеПользователи <> Неопределено Тогда
		
		Для Каждого Строка Из СправочникСсылкаРегЗаданиеПользователи.Команды Цикл
			
			Если Строка.Идентификатор = "РегламентнаяОперацияУдалениеВосстановлениеПользователей" Тогда
				Задание = РегламентныеЗаданияСервер.Задание(Строка.РегламентноеЗаданиеGUID);
				РасписаниеРегламентногоЗаданияПользователи = Задание.Расписание;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();

КонецПроцедуры 

&НаСервере
Функция ПолучитьДанныеАутентификации()

	Возврат Коннект_ОбщегоНазначения.ПолучитьДанныеАутентификации();

КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания() Экспорт
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда 
		ТекстОшибки = ПолучитьИзВременногоХранилища(АдресХранилища);
	Иначе
		ТекстОшибки = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Если ТекстОшибки <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Иначе
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	Исключение  
		
		Если ТекстОшибки <> Неопределено Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);       
		Иначе       
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
	* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершениеКлиентАвтообновление(Расписание,
		ДополнительныеПараметры) Экспорт

	РедактированиеРасписанияРегламентногоЗаданияЗавершениеАвтообновление(Расписание, ДополнительныеПараметры);

	ОбновитьПредставлениеРасписания();

КонецПроцедуры

&НаСервере
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершениеАвтообновление(Расписание,
		ДополнительныеПараметры)

	Если Расписание <> Неопределено Тогда

		СправочникСсылкаРегЗадание = ПолучитьЭлементОбработкиАвтооповещенийИзДополнительныхОтчетовИОбработкокАвтообновление();

		Если СправочникСсылкаРегЗадание = Неопределено Тогда

			ЗарегистрироватьОтчетыИОбработкиАвтообноление(Расписание);

			РасписаниеРегламентногоЗаданияОбновление = Расписание;

		Иначе

			СправочникОбъект = СправочникСсылкаРегЗадание.ПолучитьОбъект();

			РасписаниеРегламентногоЗаданияОбновление = Расписание;

			ЗапишемРегламентноеЗадание(СправочникОбъект, Расписание, Истина);

			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);

			//Оп = Новый ОписаниеОповещения("ОбновитьПредставлениеРасписания", ЭтотОбъект, Параметр);
			//ВыполнитьОбработкуОповещения(Оп, ); 
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементОбработкиАвтооповещенийИзДополнительныхОтчетовИОбработкокАвтообновление()

	СправочникСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", "Коннект_ОбновлениеРасширения");

	// Обновление/добавление.
	Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
		Возврат Неопределено;
	Иначе
		Возврат СправочникСсылка;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершениеКлиентПользователи(Расписание,
		ДополнительныеПараметры) Экспорт

	РедактированиеРасписанияРегламентногоЗаданияЗавершениеПользователи(Расписание, ДополнительныеПараметры);

	ОбновитьПредставлениеРасписания();

КонецПроцедуры

&НаСервере
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершениеПользователи(Расписание,
		ДополнительныеПараметры)

	Если Расписание <> Неопределено Тогда

		СправочникСсылкаРегЗадание = ПолучитьЭлементОбработкиАвтооповещенийИзДополнительныхОтчетовИОбработкокПользователи();

		Если СправочникСсылкаРегЗадание = Неопределено Тогда

			ЗарегистрироватьОтчетыИОбработкиПользователи(Расписание);

			РасписаниеРегламентногоЗаданияПользователи = Расписание;

		Иначе

			СправочникОбъект = СправочникСсылкаРегЗадание.ПолучитьОбъект();

			РасписаниеРегламентногоЗаданияПользователи = Расписание;

			ЗапишемРегламентноеЗадание(СправочникОбъект, Расписание, Истина);

			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);

			//Оп = Новый ОписаниеОповещения("ОбновитьПредставлениеРасписания", ЭтотОбъект, Параметр);
			//ВыполнитьОбработкуОповещения(Оп, ); 
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОтправитьЗапросНаДобавлениеСотрудника(Имя, Фамилия, Отчество, Email)

	СозданныйПользовательКоннект = Коннект_ПрограммныйИнтерфейс.ДобавитьСотрудника(Имя, Фамилия, Отчество, Email);

	ИДПользователя1сКоннект = "";

	Если СозданныйПользовательКоннект.Количество() > 0 Тогда
		ИДПользователя1сКоннект = СозданныйПользовательКоннект[0].ИДПользователя1СКоннект;
	КонецЕсли;

	Возврат ИДПользователя1сКоннект;

КонецФункции

&НаСервере
Процедура РазорватьСвязьМеждуСотрудникамиСервер(ИДСотрудникаКомпании)

	Коннект_ПрограммныйИнтерфейс.РазорватьСвязьМеждуСотрудниками(ИДСотрудникаКомпании);

КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокНеСопоставленныхСотрудников()


	НеСопоставленныеПользователи1СКоннект.Очистить();

	СписокПользователейКоннект = Коннект_ПрограммныйИнтерфейс.Сотрудники();

	ЗапросНесопоставленных = Новый Запрос;

	ЗапросНесопоставленных.Текст = ПолучитьТекстЗапросаНесопоставленныхПользователей();
	ЗапросНесопоставленных.УстановитьПараметр("ТаблицаПользователейКоннект", СписокПользователейКоннект);

	РезультатЗапросаНесопоставленных = ЗапросНесопоставленных.Выполнить();

	СписокНесопоставленныхПользователей = РезультатЗапросаНесопоставленных.Выгрузить();

	НеСопоставленныеПользователи1СКоннект.Загрузить(СписокНесопоставленныхПользователей);

КонецПроцедуры

&НаСервере
Процедура СвязатьСотрудниковСервер(ИДСотрудникаКомпании, ИДПользователя1СКоннект)

	Коннект_ПрограммныйИнтерфейс.СвязатьСотрудников(ИДСотрудникаКомпании, ИДПользователя1СКоннект);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиСоздатРазорватьСвязь(БезусловноСделатьДоступным = Неопределено)
	
	Если БезусловноСделатьДоступным = Истина Тогда
		Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Доступность = Истина;
	ИначеЕсли БезусловноСделатьДоступным = Ложь Тогда
		Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Доступность = Ложь;
	Иначе
		Если Элементы.ПользователиДляРассылки.ТекущаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(Элементы.ПользователиДляРассылки.ТекущиеДанные.Логин) Тогда
				Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Доступность = Истина;
				Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Пометка = Истина;
			Иначе
				Если Элементы.НеСопоставленныеПользователи1СКоннект.ТекущаяСтрока = Неопределено Тогда
					Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Доступность = Ложь;
				Иначе
					Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Доступность = Истина;
					Элементы.ПользователиДляРассылкиСоздатьРазорватьСвязь.Пометка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
















